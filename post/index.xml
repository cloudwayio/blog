<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on cloudway</title>
    <link>http://cloudway.io/post/</link>
    <description>Recent content in Posts on cloudway</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Code released under the Apache 2.0 license.</copyright>
    <lastBuildDate>Mon, 19 Oct 2015 23:23:01 -0400</lastBuildDate>
    <atom:link href="http://cloudway.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Creating Certificates on Mac &amp; Linux with Expect</title>
      <link>http://cloudway.io/post/creating-certificates-with-expect/</link>
      <pubDate>Mon, 19 Oct 2015 23:23:01 -0400</pubDate>
      
      <guid>http://cloudway.io/post/creating-certificates-with-expect/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s see how we can create a certificate to test with AWS ELB. First slow way and then cloud way.&lt;/p&gt;

&lt;h1 id=&#34;step-by-step-certificate-creation:8e3c24d09006d32d5d57d8b6ddec6ee2&#34;&gt;Step by Step Certificate Creation&lt;/h1&gt;

&lt;p&gt;Create private key.
Enter a password you can remember, at least for a few minutes.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl genrsa -des3 -out server.key 2048
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a certificate signing request.
Enter your domain name for &amp;ldquo;Common Name&amp;rdquo;
Don&amp;rsquo;t set a password when prompted.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl req -new -key server.key -out server.csr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remove password.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp server.key server.key.org
openssl rsa -in server.key.org -out server.key
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sign your certificate.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;now-cloud-way-with-expect:8e3c24d09006d32d5d57d8b6ddec6ee2&#34;&gt;Now Cloud Way, with Expect&lt;/h1&gt;

&lt;p&gt;Create a file named &lt;code&gt;keygen.sh&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We will use &lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/expect.1.html&#34;&gt;expect&lt;/a&gt; in order to speed up certificate generation. Expect  is a program that &amp;ldquo;talks&amp;rdquo; to other interactive programs according to a script.&lt;/p&gt;

&lt;p&gt;You may just change domain variable and it should be fine.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Contents of &lt;code&gt;keygen.sh&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/usr/bin/expect -f
set domain helloawsworld.com

spawn /usr/bin/openssl genrsa -des3 -out server.key 2048
expect &amp;quot;Enter pass phrase for server.key:&amp;quot;
send &amp;quot;hello\r&amp;quot;
expect &amp;quot;Verifying - Enter pass phrase for server.key:&amp;quot;
send &amp;quot;hello\r&amp;quot;
expect eof

spawn /usr/bin/openssl req -new -key server.key -out server.csr
expect &amp;quot;Enter pass phrase for server.key:&amp;quot;
send &amp;quot;hello\r&amp;quot;
expect &amp;quot;Country Name (2 letter code)*:&amp;quot;
send &amp;quot;\r&amp;quot;
expect &amp;quot;State or Province Name (full name)*:&amp;quot;
send &amp;quot;\r&amp;quot;
expect &amp;quot;Locality Name (eg, city)*:&amp;quot;
send &amp;quot;\r&amp;quot;
expect &amp;quot;Organization Name (eg, company)*:&amp;quot;
send &amp;quot;\r&amp;quot;
expect &amp;quot;Organizational Unit Name (eg, section)*:&amp;quot;
send &amp;quot;\r&amp;quot;
expect &amp;quot;Common Name (e.g. server FQDN or YOUR name)*:&amp;quot;
send &amp;quot;$domain\r&amp;quot;
expect &amp;quot;Email Address*:&amp;quot;
send &amp;quot;\r&amp;quot;
expect &amp;quot;A challenge password*:&amp;quot;
send &amp;quot;\r&amp;quot;
expect &amp;quot;An optional company name*:&amp;quot;
send &amp;quot;\r&amp;quot;
expect eof

spawn cp server.key server.key.org

spawn openssl rsa -in server.key.org -out server.key
expect &amp;quot;Enter pass phrase for server.key.org:&amp;quot;
send &amp;quot;hello\r&amp;quot;
expect eof 

spawn rm server.key.org

spawn openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
expect eof
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make it executable and run it&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chmod +x keygen.sh
$./keygen.sh
$ ls server*
server.csr      server.key      server.key.org      server.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you see all files are created without any input so you can repeat the process many times or use to automate testing.&lt;/p&gt;

&lt;p&gt;You will need &lt;code&gt;server.key&lt;/code&gt;for private key and &lt;code&gt;server.crt&lt;/code&gt; for public key certificate.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Summary of AWS re:Invent 2015 Announcements</title>
      <link>http://cloudway.io/post/aws-reinvent-2015-announcements/</link>
      <pubDate>Mon, 12 Oct 2015 05:23:01 -0400</pubDate>
      
      <guid>http://cloudway.io/post/aws-reinvent-2015-announcements/</guid>
      <description>

&lt;h1 id=&#34;aws-re-invent-2015-announcements:87b2ec0ce69d8227e6605a3dd984d738&#34;&gt;AWS re:Invent 2015 Announcements&lt;/h1&gt;

&lt;p&gt;There were many announcements during the AWS re:Invent 2015. Under 5 minutes, you may have an idea about 17 of them.&lt;/p&gt;

&lt;h2 id=&#34;keynotes:87b2ec0ce69d8227e6605a3dd984d738&#34;&gt;Keynotes&lt;/h2&gt;

&lt;p&gt;Day One: &lt;a href=&#34;https://www.youtube.com/embed/D5-ifl7KJ00?rel=0;hd=1;autoplay=1,&#34; title=&#34;Andy Jessy&#39;s Keynote&#34;&gt;Andy Jassy&amp;rsquo;s Keynote&lt;/a&gt; [1:53:31]&lt;/p&gt;

&lt;p&gt;Day Two: &lt;a href=&#34;https://www.youtube.com/embed/y-0Wf2Zyi5Q?rel=0;hd=1;autoplay=1,&#34; title=&#34;Dr. Werner Vogels&#39;s Keynote&#34;&gt;Dr. Werner Vogels&amp;rsquo;s Keynote&lt;/a&gt; [1:34:22]&lt;/p&gt;

&lt;p&gt;Here you can find &lt;a href=&#34;https://www.youtube.com/user/AmazonWebServices/Cloud,&#34; title=&#34;all AWS re:Invent recordings&#34;&gt;all recordings&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;announcements:87b2ec0ce69d8227e6605a3dd984d738&#34;&gt;Announcements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/quicksight/&#34;&gt;Amazon QuickSight&lt;/a&gt; : Amazon QuickSight is a very fast, cloud-powered business intelligence (BI) service that makes it easy for all employees to build visualizations, perform ad-hoc analysis, and quickly get business insights from their data.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/kinesis/firehose/&#34;&gt;Amazon Kinesis Firehose&lt;/a&gt; : Amazon Kinesis Firehose is the easiest way to load streaming data into AWS. It can capture and automatically load streaming data into Amazon S3 and Amazon Redshift, enabling near real-time analytics with existing business intelligence tools and dashboards youâ€™re already using today.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/importexport&#34;&gt;AWS Import/Export Snowball&lt;/a&gt; : AWS Import/Export Snowball is a petabyte-scale data transport solution that uses secure appliances to transfer large amounts of data into and out of AWS. Using Snowball addresses common challenges with large-scale data transfers including high network costs, long transfer times, and security concerns.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/inspector&#34;&gt;Amazon Inspector (Preview)&lt;/a&gt; : Amazon Inspector is an automated security assessment service that helps improve the security and compliance of applications deployed on AWS.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/rds/mariadb&#34;&gt;Amazon RDS for MariaDB&lt;/a&gt; : Amazon RDS makes it easy to set up, operate, and scale MariaDB deployments in the cloud. With Amazon RDS, you can deploy scalable MariaDB databases in minutes with cost-efficient and resizable hardware capacity.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/dms/&#34;&gt;AWS Database Migration Service (Preview)&lt;/a&gt; : AWS Database Migration Service helps you migrate databases to AWS easily and securely. With AWS Database Migration Service, the source database remains fully operational during the migration, minimizing downtime to applications that rely on the database.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/config/preview/&#34;&gt;AWS Config Rules (Preview)&lt;/a&gt; : AWS Config Rules is a new set of cloud governance capabilities that allow IT Administrators to define guidelines for provisioning and configuring AWS resources and then continuously monitor compliance with those guidelines.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/elasticsearch-service/&#34;&gt;Amazon Elasticsearch Service&lt;/a&gt; : Amazon Elasticsearch Service is a managed service that makes it easy to deploy, operate, and scale Elasticsearch in the AWS Cloud.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/waf&#34;&gt;AWS WAF&lt;/a&gt; : AWS WAF is a web application firewall that helps protect your web applications from common web exploits that could affect application availability, compromise security, or consume excessive resources.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/ec2/dedicated-hosts&#34;&gt;Amazon EC2 Dedicated Hosts (Coming Soon)&lt;/a&gt; : An Amazon EC2 Dedicated Host is a physical server with EC2 instance capacity fully dedicated to your use.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/iot&#34;&gt;AWS IoT (beta)&lt;/a&gt; : AWS IoT is a managed cloud platform that lets connected devices easily and securely interact with cloud applications and other devices.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/mobile&#34;&gt;AWS Mobile Hub (beta)&lt;/a&gt; : AWS Mobile Hub is the fastest way to build mobile apps powered by AWS. It lets you easily add and configure features for your apps, including user authentication, data storage, backend logic, push notifications, content delivery, and analytics.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/ecr/&#34;&gt;Amazon EC2 Container Registry&lt;/a&gt; : Amazon EC2 Container Registry (ECR) is a fully-managed Docker container registry that makes it easy for developers to store, manage, and deploy Docker container images.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/ecs&#34;&gt;Amazon EC2 Container Service&lt;/a&gt; : Amazon EC2 Container Service (ECS) is a highly scalable, high performance container management service that supports Docker containers and allows you to easily run applications on a managed cluster of Amazon EC2 instances.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/lambda&#34;&gt;AWS Lambda&lt;/a&gt; : &lt;em&gt;-Python support, VPC support, long running, scheduling, custom retry logic-&lt;/em&gt; AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume - there is no charge when your code is not running. With Lambda, you can run code for virtually any type of application or backend service - all with zero administration.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/about-aws/whats-new/2015/10/cloudwatch-dashboards/&#34;&gt;CloudWatch Dashboards&lt;/a&gt; : Amazon CloudWatch Dashboards enable you to create re-usable graphs of AWS resources and custom metrics so you can quickly monitor operational status and identify issues at a glance.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/ec2/spot&#34;&gt;Amazon EC2 Spot Instances&lt;/a&gt;: &lt;em&gt;-6 hours run time for spot instances-&lt;/em&gt; Amazon EC2 Spot instances are spare EC2 instances that you can bid on to run your cloud computing applications.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;PS: Service descriptions are taken from &lt;a href=&#34;http://aws.amazon.com&#34;&gt;aws.amazon.com&lt;/a&gt; and you can find more detailed information and documentation on AWS web site. &lt;em&gt;Italic&amp;rsquo;s are my comments.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>http://cloudway.io/post/hello_world/</link>
      <pubDate>Mon, 28 Sep 2015 23:23:01 -0400</pubDate>
      
      <guid>http://cloudway.io/post/hello_world/</guid>
      <description>

&lt;h1 id=&#34;hello-world:a37038ea9c0a627175646a70bd3fc060&#34;&gt;Hello World&lt;/h1&gt;

&lt;p&gt;A few things happened around the same time.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I started learning Go language&lt;/li&gt;
&lt;li&gt;AWS released &lt;a href=&#34;https://aws.amazon.com/sdk-for-go/&#34;&gt;AWS SDK for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I wanted to write more about AWS products and services&lt;/li&gt;
&lt;li&gt;I wanted to try a static site generator which can run easily on many platforms&lt;/li&gt;
&lt;li&gt;I wanted to host new blog completely on AWS&lt;/li&gt;
&lt;li&gt;I wanted to get a new domain for the new blog&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;go-language:a37038ea9c0a627175646a70bd3fc060&#34;&gt;Go Language&lt;/h2&gt;

&lt;p&gt;I have been using python for a while now. I can&amp;rsquo;t say I am an expert or anything on the language, but I have used it extensively to automate tasks. I worked on &lt;a href=&#34;https://wiki.openstack.org/wiki/Zaqar&#34; title=&#34;OpenStack Zaqar&#34;&gt;OpenStack Zaqar project&lt;/a&gt; for a while and wrote the code to distribute queues on multiple partitions in order to overcome the slowness that comes with MongoDB database &lt;a href=&#34;http://docs.mongodb.org/manual/faq/concurrency/#what-type-of-locking-does-mongodb-use&#34;&gt;locks&lt;/a&gt;. I used python to write a few custom modules for &lt;a href=&#34;http://saltstack.com/&#34; title=&#34;SaltStack&#34;&gt;SaltStack&lt;/a&gt;. I used python in order to learn &lt;a href=&#34;https://en.wikipedia.org/wiki/Consistent_hashing&#34;&gt;consistent hashing&lt;/a&gt; that is used in many eventually consistent distributed applications like &lt;a href=&#34;https://aws.amazon.com/s3/&#34; title=&#34;Amazon S3&#34;&gt;Amazon S3&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I liked Python because it was very easy, there is lots of projects written in python I could learn from. Like I wrote, I am not an expert on python neither on Go so I can&amp;rsquo;t compare two languages. I just wanted a language, that it fast, easy to run on different platforms. I tried Go language and found it interesting. I am nowhere yet to say it solves this and that bussiness problem best but what I hear is, it is really good for systems programming because of many reasons all described in this &lt;a href=&#34;https://gist.github.com/ungerik/3731476&#34;&gt;list of articles&lt;/a&gt; compiled by Erik.&lt;/p&gt;

&lt;h2 id=&#34;aws-sdk-for-go:a37038ea9c0a627175646a70bd3fc060&#34;&gt;AWS SDK for Go&lt;/h2&gt;

&lt;p&gt;AWS has SDKs for &lt;a href=&#34;https://aws.amazon.com/tools/&#34;&gt;Java, .NET, PHP, Python, Ruby and Node.js&lt;/a&gt; and Go added to the list recently. My new favorite language would be a good tool to implement many ideas I have around AWS services. It is much easier to use an SDK than calling a restul API directly.&lt;/p&gt;

&lt;h2 id=&#34;writing-about-aws-services:a37038ea9c0a627175646a70bd3fc060&#34;&gt;Writing about AWS Services&lt;/h2&gt;

&lt;p&gt;AWS adds new features and services at a head spinning pace. There is so much to learn, understand, discuss and tell. I want to keep the momentum on writing about topics that I believe will help others following a similar path.&lt;/p&gt;

&lt;h2 id=&#34;static-site-generator:a37038ea9c0a627175646a70bd3fc060&#34;&gt;Static Site Generator&lt;/h2&gt;

&lt;p&gt;I used &lt;a href=&#34;https://jekyllrb.com/&#34; title=&#34;jekyll&#34;&gt;Jekyll&lt;/a&gt; for a while, it for sure is a good static site generator and really integrates well with &lt;a href=&#34;https://pages.github.com/&#34; title=&#34;GitHub Pages&#34;&gt;GitHub Pages&lt;/a&gt;. Jekyll is written in Ruby. I wanted to start using a tool written in Go and I was lucky to find &lt;a href=&#34;https://gohugo.io/&#34; title=&#34;hugo&#34;&gt;Hugo&lt;/a&gt; which is an amazingly fast static site generator. Written in go, code is well written so also a good place to see best practices.&lt;/p&gt;

&lt;h2 id=&#34;hosted-on-aws:a37038ea9c0a627175646a70bd3fc060&#34;&gt;Hosted on AWS&lt;/h2&gt;

&lt;p&gt;I also wanted to host my site on AWS using services like S3, Cloud Front, Route 53 across multiple regions in an HA setup that can bear all kinds of issues. My content will be completely mine and since management overhead of the services I mentioned is very low, I won&amp;rsquo;t need to invest too much time on operations side of the site.&lt;/p&gt;

&lt;h2 id=&#34;new-start-new-domain:a37038ea9c0a627175646a70bd3fc060&#34;&gt;New Start, New Domain&lt;/h2&gt;

&lt;p&gt;For the new site, I wanted to have something easy to remember. It would be good to start with &amp;ldquo;cloud&amp;rdquo; as it is a word probably pronounced more than any other word these days when discussion comes to infrastructure and automation. Since all domain extensions are taken for cloud, I had to find a suffix. I came up with &amp;ldquo;way&amp;rdquo; as it means;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;a method, style, or manner of doing something.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It had to be .io so &lt;strong&gt;cloudway.io&lt;/strong&gt; was my new domain.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>